'''
Code used to calculate the estimated minimum holding period using both excess returns & absolute returns. 
This code is used within the paper 'Quantifying Patience'.
The paper can be found here: https://papers.ssrn.com/sol3/papers.cfm?abstract_id=5050385
'''





import numpy as np
import pandas as pd
from lifelines import KaplanMeierFitter
import os
from arch.bootstrap import StationaryBootstrap
from scipy.stats import norm, t
import warnings
from tqdm import tqdm
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import matplotlib.ticker as ticker


warnings.filterwarnings('ignore')

# Set directories (adjust paths as needed)
fig_dir = r"C:\Minimum Holding Periods\figures"
tab_dir = r"C:\Minimum Holding Periods\tables"
os.makedirs(fig_dir, exist_ok=True)
os.makedirs(tab_dir, exist_ok=True)

###################################
# 1. Load and Prepare Data
###################################

df_loc = r"C:\performance_data.pkl"
df = pd.read_pickle(df_loc)

# group data by month summing all the returns per month
df = df.resample('M').sum()

# rename columns
column_rename_dict = {'Low': 'p1',
                      'ARC Sterling Cautious PCI TR in GB': 'b1',
                      'Medium': 'p2',
                      'ARC Sterling Balanced Asset PCI TR in GB': 'b2',
                      'High': 'p3',
                      'ARC Sterling Steady Growth PCI TR in GB': 'b3'}
df.rename(columns=column_rename_dict, inplace=True)

# add excess return columns
df['e1'] = df['p1'] - df['b1']
df['e2'] = df['p2'] - df['b2']
df['e3'] = df['p3'] - df['b3']

# We will run the analysis for portfolio returns (p1,p2,p3) and excess returns (e1,e2,e3)
portfolio_keys = ['p1','p2','p3']
excess_keys = ['e1','e2','e3']

print("Data loaded.")

###################################
# 2. Define Parameters (Monthly)
###################################

MONTHS_IN_YEAR = 12
YEARS = np.arange(1, 16) 
HORIZONS = YEARS * MONTHS_IN_YEAR
NUM_BOOTSTRAPS = 10000
BLOCK_SIZE = 3  # block size in months (approx)
PROB = 1.0 / 3  # stationary bootstrap probability

print("HORIZONS (months):", HORIZONS)
print("Number of simulations per horizon:", NUM_BOOTSTRAPS)

###################################
# Simulation Functions
###################################

def iid_bootstrap_final(returns, horizon=12, n_sims=10000):
    cum_returns = []
    for _ in range(n_sims):
        sim_data = np.random.choice(returns, size=horizon, replace=True)
        cumulative_return = np.prod(1 + sim_data) - 1
        cum_returns.append(cumulative_return)
    return np.array(cum_returns)

def block_bootstrap_final(returns, horizon=12, n_sims=10000, block_size=3):
    cum_returns = []
    n = len(returns)
    n_blocks = int(np.ceil(horizon / block_size))
    for _ in range(n_sims):
        block_starts = np.random.randint(0, n - block_size, size=n_blocks)
        sim_data = []
        for b in block_starts:
            sim_data.extend(returns[b:b + block_size])
        sim_data = np.array(sim_data[:horizon])
        cumulative_return = np.prod(1 + sim_data) - 1
        cum_returns.append(cumulative_return)
    return np.array(cum_returns)

def stationary_bootstrap_final(returns, horizon=12, n_sims=10000, prob=1.0 / 3):
    cum_returns = []
    bs = StationaryBootstrap(prob, returns)
    for ydata, idx in bs.bootstrap(n_sims):
        sim_data = ydata[0][:horizon]
        cumulative_return = np.prod(1 + sim_data) - 1
        cum_returns.append(cumulative_return)
    return np.array(cum_returns)

def parametric_normal_final(returns, horizon=12, n_sims=10000):
    cum_returns = []
    mu = np.mean(returns)
    sigma = np.std(returns, ddof=1)
    for _ in range(n_sims):
        sim_data = np.random.normal(mu, sigma, size=horizon)
        cumulative_return = np.prod(1 + sim_data) - 1
        cum_returns.append(cumulative_return)
    return np.array(cum_returns)

def fit_students_t(returns):
    mu = np.mean(returns)
    sigma = np.std(returns, ddof=1)
    k = pd.Series(returns).kurt()
    if k <= 0:
        nu = 30.0
    else:
        nu = 6.0 / k + 4.0
        nu = max(nu, 5.0)
    return mu, sigma, nu

def parametric_t_final(returns, horizon=12, n_sims=10000, mu=0, sigma=1, nu=10):
    cum_returns = []
    for _ in range(n_sims):
        sim_data = t.rvs(df=nu, loc=mu, scale=sigma, size=horizon)
        cumulative_return = np.prod(1 + sim_data) - 1
        cum_returns.append(cumulative_return)
    return np.array(cum_returns)


def run_analysis_for_keys(keys, label):
    """
    Run the underperformance probability simulations and KM survival for the given keys.
    label should be 'portfolio' or 'excess' to distinguish the output.
    Returns a dict of results_dataframes and a dict of KM fitters.
    """
    methods_results = {}
    km_results = {}

    for key in keys:
        returns = df[key].dropna().values
        mu_t, sigma_t, nu_t = fit_students_t(returns)
        print(f"{key} ({label}): mu={mu_t}, sigma={sigma_t}, nu={nu_t}")

        methods = {
            'IID': lambda h: iid_bootstrap_final(returns, horizon=h, n_sims=NUM_BOOTSTRAPS),
            'Block': lambda h: block_bootstrap_final(returns, horizon=h, n_sims=NUM_BOOTSTRAPS, block_size=BLOCK_SIZE),
            'Stationary': lambda h: stationary_bootstrap_final(returns, horizon=h, n_sims=NUM_BOOTSTRAPS, prob=PROB),
            'Normal': lambda h: parametric_normal_final(returns, horizon=h, n_sims=NUM_BOOTSTRAPS),
            'StudentT': lambda h: parametric_t_final(returns, horizon=h, n_sims=NUM_BOOTSTRAPS, mu=mu_t, sigma=sigma_t, nu=nu_t),
        }

        results = {}
        method_list = list(methods.keys())
        for method_name in tqdm(method_list, desc=f"Methods ({key} - {label})", leave=True):
            results[method_name] = {}
            for H in tqdm(HORIZONS, desc=f"{method_name} Horizons ({key} - {label})", leave=False):
                data = methods[method_name](H)
                underperf = np.mean(data < 0)
                results[method_name][H] = underperf

        results_df = pd.DataFrame(results)
        results_df.index.name = 'Horizon (months)'

        methods_results[key] = results_df

        # Kaplanâ€“Meier Survival Analysis
        MAX_HORIZON = 192 # 15 years * 12 months
        threshold_horizon = 12 # 1 year
        n_sims_km = 1000

        def iid_bootstrap_monthly_path(returns, horizon=12):
            sim_data = np.random.choice(returns, size=horizon, replace=True)
            return sim_data

        survival_times = []
        event_observed = []

        for i in range(n_sims_km):
            path = iid_bootstrap_monthly_path(returns, horizon=MAX_HORIZON)
            cum_path = np.cumprod(1 + path) - 1

            positive_months = np.where(cum_path[threshold_horizon:] > 0)[0]
            if len(positive_months) > 0:
                event_time = positive_months[0] + 1 + threshold_horizon
                event_occurred = 1
            else:
                event_time = MAX_HORIZON
                event_occurred = 0

            survival_times.append(event_time)
            event_observed.append(event_occurred)

        kmf = KaplanMeierFitter()
        kmf.fit(durations=survival_times, event_observed=event_observed)

        km_results[key] = kmf

    return methods_results, km_results

# Run analysis for portfolios (p1,p2,p3)
portfolio_results, portfolio_km = run_analysis_for_keys(portfolio_keys, label='portfolio')

# Run analysis for excess (e1,e2,e3)
excess_results, excess_km = run_analysis_for_keys(excess_keys, label='excess')

print("All simulations complete for both portfolio and excess returns.")

###################################
# Plot Cumulative Returns (2 rows x 3 columns)
###################################
fig, axs = plt.subplots(2, 3, figsize=(15, 10), sharex=True)

# Top row: cumulative returns for p1,b1; p2,b2; p3,b3
# Bottom row: cumulative excess for e1,e2,e3

for i, (p, b, e) in enumerate([('p1','b1','e1'), ('p2','b2','e2'), ('p3','b3','e3')]):
    cum_p = (1 + df[p]).cumprod()
    cum_b = (1 + df[b]).cumprod()
    cum_e = (1 + df[e]).cumprod() - 1

    # top row: p,b
    axs[0, i].plot(cum_p.index, cum_p, label=f'{p.upper()} Cumulative', linewidth=1.5)
    axs[0, i].plot(cum_b.index, cum_b, label=f'{b.upper()} Cumulative', linewidth=1.5)
    axs[0, i].set_ylabel('Cumulative Return', fontsize=10)
    axs[0, i].set_title(f'Cumulative Performance of {p.upper()} & {b.upper()}', fontsize=12)
    axs[0, i].legend(fontsize=8)
    axs[0, i].grid(axis='y', linestyle='--', linewidth=0.5)

    # bottom row: excess
    axs[1, i].plot(cum_e.index, cum_e, label=f'{e.upper()} Cumulative (P-B)', color='green', linewidth=1.5)
    axs[1, i].set_xlabel('Date', fontsize=10)
    axs[1, i].set_ylabel('Cumulative Excess', fontsize=10)
    axs[1, i].set_title(f'Cumulative Excess Performance ({p.upper()} - {b.upper()})', fontsize=12)
    axs[1, i].legend(fontsize=8)
    axs[1, i].grid(axis='y', linestyle='--', linewidth=0.5)
    axs[1, i].xaxis.set_major_locator(mdates.YearLocator())
    axs[1, i].xaxis.set_major_formatter(mdates.DateFormatter('%Y'))

    # Customize x-axis ticks for all subplots in the column
    axs[1, i].xaxis.set_major_locator(ticker.MaxNLocator(5))  # Ensure a maximum of 5 ticks
    axs[1, i].xaxis.set_major_formatter(mdates.DateFormatter('%Y'))  # Format the ticks to show the year

plt.tight_layout()
plt.savefig(os.path.join(fig_dir, 'cumulative_performance_p_b_e_all.png'), dpi=300)
plt.close()
print("Cumulative performance plot (all sets) saved successfully.")

###################################
# Plot Underperformance Probability for Portfolio Returns (3 columns x 1 row)
###################################
fig, axs = plt.subplots(1, 3, figsize=(15, 5), sharey=True)
for i, key in enumerate(portfolio_keys):
    results_df = portfolio_results[key]
    for method_name in results_df.columns:
        if method_name != 'Average':
            axs[i].plot(results_df.index, results_df[method_name], marker='o', label=method_name)
    axs[i].set_xlabel('Horizon (months)', fontsize=12)
    if i == 0:
        axs[i].set_ylabel('Probability of Underperformance', fontsize=12)
    axs[i].set_title(f'Underperformance Probability ({key.upper()})', fontsize=14)
    axs[i].grid(True)
    axs[i].legend(fontsize=8)
    axs[i].set_xlim(12, 180)

plt.tight_layout()
plt.savefig(os.path.join(fig_dir, 'underperformance_probability_all_portfolios.png'), dpi=300)
plt.close()
print("Underperformance probability plots (portfolio sets) saved.")

###################################
# Plot Underperformance Probability for Excess Returns (3 columns x 1 row)
###################################
fig, axs = plt.subplots(1, 3, figsize=(15, 5), sharey=True)
for i, key in enumerate(excess_keys):
    results_df = excess_results[key]
    for method_name in results_df.columns:
        if method_name != 'Average':
            axs[i].plot(results_df.index, results_df[method_name], marker='o', label=method_name)
    axs[i].set_xlabel('Horizon (months)', fontsize=12)
    if i == 0:
        axs[i].set_ylabel('Probability of Underperformance', fontsize=12)
    axs[i].set_title(f'Underperformance Probability ({key.upper()})', fontsize=14)
    axs[i].grid(True)
    axs[i].legend(fontsize=8)
    axs[i].set_xlim(12, 180)

plt.tight_layout()
plt.savefig(os.path.join(fig_dir, 'underperformance_probability_all_excess.png'), dpi=300)
plt.close()
print("Underperformance probability plots (excess sets) saved.")


###################################
# Plot Kaplanâ€“Meier Survival Curves for Portfolio Returns (3 columns x 1 row)
###################################
fig, axs = plt.subplots(1, 3, figsize=(15, 5), sharey=True)
for i, key in enumerate(portfolio_keys):
    kmf = portfolio_km[key]
    kmf.plot_survival_function(ax=axs[i])
    axs[i].set_xlabel('Horizon (months)', fontsize=12)
    if i == 0:
        axs[i].set_ylabel('Survival Probability\n(no outperformance after 12 months)', fontsize=10)
    axs[i].set_title(f'KM Survival (Outperformance after 12 months - {key.upper()})', fontsize=12)
    axs[i].grid(True)
    axs[i].set_ylim(0, 0.5)
    axs[i].set_xlim(12, 180)

plt.tight_layout()
plt.savefig(os.path.join(fig_dir, 'survival_function_comparison_all_portfolios.png'), dpi=300)
plt.close()
print("KM survival function plots (portfolio sets) saved.")

###################################
# Plot Kaplanâ€“Meier Survival Curves for Excess Returns (3 columns x 1 row)
###################################
fig, axs = plt.subplots(1, 3, figsize=(15, 5), sharey=True)
for i, key in enumerate(excess_keys):
    kmf = excess_km[key]
    kmf.plot_survival_function(ax=axs[i])
    axs[i].set_xlabel('Horizon (months)', fontsize=12)
    if i == 0:
        axs[i].set_ylabel('Survival Probability\n(no outperformance after 12 months)', fontsize=10)
    axs[i].set_title(f'KM Survival (Outperformance after 12 months - {key.upper()})', fontsize=12)
    axs[i].grid(True)
    axs[i].set_ylim(0, 0.5)
    axs[i].set_xlim(12, 180)

plt.tight_layout()
plt.savefig(os.path.join(fig_dir, 'survival_function_comparison_all_excess.png'), dpi=300)
plt.close()
print("KM survival function plots (excess sets) saved.")

###################################
# Save Tables (Portfolio)
###################################
for key in portfolio_keys:
    results_df = portfolio_results[key].copy()
    results_df['Average'] = results_df.mean(axis=1)
    latex_table = results_df.to_latex(
        float_format="%.3f",
        index=True,
        header=True,
        escape=False,
        column_format='l' + 'r'*(len(results_df.columns))
    )
    with open(os.path.join(tab_dir, f'underperformance_probabilities_all_methods_{key}_portfolio.tex'), 'w') as f:
        f.write(latex_table)

###################################
# Save Tables (Excess)
###################################
for key in excess_keys:
    results_df = excess_results[key].copy()
    results_df['Average'] = results_df.mean(axis=1)
    latex_table = results_df.to_latex(
        float_format="%.3f",
        index=True,
        header=True,
        escape=False,
        column_format='l' + 'r'*(len(results_df.columns))
    )
    with open(os.path.join(tab_dir, f'underperformance_probabilities_all_methods_{key}_excess.tex'), 'w') as f:
        f.write(latex_table)

print("Simulation complete. Figures and tables for both portfolio and excess returns saved.")

###################################
# Save KM Survival Tables (Portfolio)
###################################
for key in portfolio_keys:
    kmf = portfolio_km[key]
    # Extract the survival function DataFrame
    sf_df = kmf.survival_function_.copy()
    sf_df.index.name = "Horizon (months)"
    sf_df.columns = ["Survival Probability"]

    latex_table = sf_df.to_latex(
        float_format="%.3f",
        index=True,
        header=True,
        escape=False,
        column_format='lr'  # 'l' for left-aligned index, 'r' for right-aligned numeric column
    )
    with open(os.path.join(tab_dir, f'survival_function_{key}_portfolio.tex'), 'w') as f:
        f.write(latex_table)

###################################
# Save KM Survival Tables (Excess)
###################################
for key in excess_keys:
    kmf = excess_km[key]
    # Extract the survival function DataFrame
    sf_df = kmf.survival_function_.copy()
    sf_df.index.name = "Horizon (months)"
    sf_df.columns = ["Survival Probability"]

    latex_table = sf_df.to_latex(
        float_format="%.3f",
        index=True,
        header=True,
        escape=False,
        column_format='lr'
    )
    with open(os.path.join(tab_dir, f'survival_function_{key}_excess.tex'), 'w') as f:
        f.write(latex_table)

print("Kaplanâ€“Meier survival function tables for both portfolio and excess returns saved.")

